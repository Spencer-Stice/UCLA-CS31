	For step 5, the first input I provided included -100 voters total, 40 voters for Joe, and 60 voters for Donald. The program did not seem to have any errors accepting a negative number of voters and proceeded to display negative percentages of the total population that voted for Joe and Donald, which were -40% and -60%, respectively. Although Joe did technically have a greater percentage of voters (altough a lower number of voters), the program determined that Donald won the election. This is because the program only considers the number of voters for each candidate, as opposed to the percentages, to determine the winner. 
	My second input, in attempt to produce unusual results, included: 0 total voters, 5 voters for Joe, and 10 voters for Donald. Again, there were no errors from the program upon entering these inputs. The, results, however, were interesting. The program outputted "inf%" for each candidate (to be expected, the program is dividing by 0). Altough each candidate apparently won an infinite percentage of the votes, Donald was predicted to win. 
	As a final round of input to further investigate the idea of a tie, my third input included: 100 voters total, 50 votes for Joe, and 50 votes for Donald. Again, the program did not report any errors associated with these input values. The output included 50% of the vote for both candidates, which should clearly result in a tie. However, Donald was still predicted to win the election. This is because the program first checks if Joe has more votes than Donald, and if not true, automatically gives the win to Donald, failing to check if they have the same number of votes.
	Following my inputs that resulted in unusual or irregular results, I altered the original program by changing the ">" in the conditional statement regarding the number of voters for each candidate (line 30) to "<". Although not causing a compiling error, this did cause the program to produce incorrect results from reasonable inputs. This is due to the fact that this change makes the program always produce an incorrect prediction regarding the winner of the election. For example, if Joe has more voters than Donald, the first conditional statement (line 30) is false, thus the program runs the else code which states that Donald has won the election, despite the fact that Joe has more voters. Alternatively, if Joe has less voters than Donald, the program determines that Joe is predicted to win (line 31 is executed), despite the fact that he has less voters. None of the tests or builds of this modified program resulted in an error from the computer, just an incorrect result.
	Finally, I corrected the previous error but I also introduced two new errors that resulted in the program failing to compile. First, I deleted the line that declared the variable "forJoe". Second, I deleted the closing quotation marks at the end of the line that prints that Joe is predicted to win the election. Deleting the declaration of the variable resulted in an "undeclared identifier" warning message from the compiler, which prevented the compiler from using this variable for the rest of the program (which is a requirement to run the rest of the program), causing a compilation error. Deleting the closing quotation resulted in a "missing closing quote" error from the compiler, which also resulted in an "expecting ;" message becuase the semicolon that was previously used to end the line of code was then being considered part of the message the console would print, leaving the line without a semicolon to denote the ending of the statement. This is a summary of the error messages resulting from these errors.